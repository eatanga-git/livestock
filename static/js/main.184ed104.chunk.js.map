{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","state","newsItems","fetch","then","response","json","articles","setState","catch","error","console","log","Pusher","cluster","encrypted","subscribe","bind","data","this","map","e","article","id","pushid","key","href","url","title","className","src","alt","Component","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"iTAqDeA,G,iNA7CbC,MAAQ,CACNC,UAAW,I,mFAGQ,IAAD,OAClBC,MAAM,8BACHC,MAAK,SAAAC,GAAQ,OAAIA,EAASC,UAC1BF,MAAK,SAAAG,GACJ,EAAKC,SAAS,CACZN,UAAU,GAAD,mBAAM,EAAKD,MAAMC,WAAjB,YAA+BK,SAEzCE,OAAM,SAAAC,GAAK,OAAIC,QAAQC,IAAIF,MAEjB,IAAIG,IAAO,uBAAwB,CAChDC,QAAS,MACTC,WAAW,IAGUC,UAAU,gBACzBC,KAAK,eAAe,SAAAC,GAC1B,EAAKV,SAAS,CACZN,UAAU,GAAD,mBAAMgB,EAAKX,UAAX,YAAwB,EAAKN,MAAMC,mB,+BAMhD,IAIMA,EAAYiB,KAAKlB,MAAMC,UAAUkB,KAAI,SAAAC,GAAC,OAJ1BC,EAIuCD,EAJ9BE,EAIiCC,MAH1D,wBAAIC,IAAKF,GAAI,uBAAGG,KAAI,UAAKJ,EAAQK,MAAQL,EAAQM,QADlC,IAACN,EAASC,KAM3B,OACE,yBAAKM,UAAU,OAEb,wBAAIA,UAAU,aAAY,yBAAKA,UAAU,OAAOC,IAAI,qCAAqCC,IAAI,KAA7F,cAAiH,0BAAMF,UAAU,QAAhB,iBACjH,wBAAIA,UAAU,QAAQ3B,GACtB,wBAAI2B,UAAU,oB,GAvCJG,cCKZC,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTpC,MAAK,SAAAyC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiB9C,QACfyC,UAAUC,cAAcO,YAI1BvC,QAAQC,IACN,iHAKE6B,GAAUA,EAAOU,UACnBV,EAAOU,SAASN,KAMlBlC,QAAQC,IAAI,sCAGR6B,GAAUA,EAAOW,WACnBX,EAAOW,UAAUP,WAO5BpC,OAAM,SAAAC,GACLC,QAAQD,MAAM,4CAA6CA,MC1FjE2C,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SDgB1C,SAAkBf,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIe,IAAIC,6BAAwBvB,OAAOC,SAASV,MACpDiC,SAAWxB,OAAOC,SAASuB,OAIvC,OAGFxB,OAAOyB,iBAAiB,QAAQ,WAC9B,IAAMpB,EAAK,UAAMkB,6BAAN,sBAEPzB,IAgEV,SAAiCO,EAAOC,GAEtCtC,MAAMqC,GACHpC,MAAK,SAAAC,GAEJ,IAAMwD,EAAcxD,EAASyD,QAAQC,IAAI,gBAEnB,MAApB1D,EAAS2D,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CvB,UAAUC,cAAcuB,MAAM9D,MAAK,SAAAyC,GACjCA,EAAasB,aAAa/D,MAAK,WAC7B+B,OAAOC,SAASgC,eAKpB7B,EAAgBC,EAAOC,MAG1BhC,OAAM,WACLE,QAAQC,IACN,oEArFAyD,CAAwB7B,EAAOC,GAI/BC,UAAUC,cAAcuB,MAAM9D,MAAK,WACjCO,QAAQC,IACN,iHAMJ2B,EAAgBC,EAAOC,OCvC/BE,K","file":"static/js/main.184ed104.chunk.js","sourcesContent":["// client/src/App.js\n\nimport React, { Component } from 'react';\nimport Pusher from 'pusher-js';\nimport pushid from 'pushid';\nimport './App.css';\n\nclass App extends Component {\n  state = {\n    newsItems: [],\n  }\n\n  componentDidMount() {\n    fetch('http://localhost:5000/live')\n      .then(response => response.json())\n      .then(articles => {\n        this.setState({\n          newsItems: [...this.state.newsItems, ...articles],\n        });\n      }).catch(error => console.log(error));\n\n    const pusher = new Pusher('d199e9a6efffd4d3f643', {\n      cluster: 'us2',\n      encrypted: true,\n    });\n\n    const channel = pusher.subscribe('news-channel');\n    channel.bind('update-news', data => {\n      this.setState({\n        newsItems: [...data.articles, ...this.state.newsItems],\n      });\n    });\n  }\n\n  render() {\n    const NewsItem = (article, id) => (\n      <li key={id}><a href={`${article.url}`}>{article.title}</a></li>\n    );\n\n    const newsItems = this.state.newsItems.map(e => NewsItem(e, pushid()));\n\n    return (\n      <div className=\"App\">\n        \n        <h1 className=\"App-title\"><img className=\"logo\" src=\"/images/livestock logo - small.png\" alt=\"\"></img>  LiveStock<span className=\"demo\"> (Demo Ver.)</span></h1>\n        <ul className=\"item\">{newsItems}</ul>\n        <ul className=\"news-items\"></ul>\n        \n      </div>\n    );\n  }\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}